;; -*-Lisp-*-

;;

(defun null (x)
  (eq x '()))

;;

(defun and (x y)
  (cond (x (cond (y #t) (#t #f)))
        (#t #f)))

;;

(defun or (x y)
  (cond (x #t)
        (y #t)
        (#t #f)))

;;

(defun not (x)
  (cond (x #f)
        (#t #t)))

;;

(defun append (x y)
  (cond ((null x) y)
        (#t (cons (car x)
                  (append (cdr x) y)))))

;;

(defun + (x y)
  (cond ((eq y 0) x)
        (#t (+ (inc x) (dec y)))))

;;

(defun - (x y)
  (cond ((eq y 0) x)
        (#t (- (dec x) (dec y)))))

;;

(defun * (x y)
  (cond ((eq y 0) 0)
        ((eq x 0) 0)
        (#t ((label iter (lambda (a b)
                           (cond ((eq b 1) a)
                                 (#t (iter (+ a x) (dec b))))))
             x y))))

;;

(defun < (x y)
  (cond ((eq x y) #f)
        ((eq x 0) #t)
        ((eq y 0) #f)
        (#t (< (dec x) (dec y)))))

;;

(defun > (x y)
  (not (or (< x y) (eq x y))))

;;

(defun reverse (x)
  ((label iter (lambda (acc coll)
                 (cond ((null coll) acc)
                       (#t (iter (cons (car coll) acc)
                                 (cdr coll))))))
   '() x))

;;

(defun map (f x)
  ((label iter (lambda (acc coll)
                 (cond ((null coll) acc)
                       (#t (iter (append acc (cons (f (car coll)) '()))
                                 (cdr coll))))))
   '() x))

;;

(defun zip (x y)
  (cond ((and (null x) (null y)) '())
        ((and (not (atom x)) (not (atom y)))
         (cons (cons (car x) (cons (car y) '()))
               (zip (cdr x) (cdr y))))))

;;

(defun assoc (x y)
  (cond ((eq (car (car y)) x) (car (cdr (car y))))
        (#t (assoc x (cdr y)))))
