;; -*-Lisp-*-

;;

(defun null (x)
  (eq x '()))

;;

(defun and (x y)
  (cond (x (cond (y #t) (#t #f)))
        (#t #f)))

;;

(defun or (x y)
  (cond (x #t)
        (y #t)
        (#t #f)))

;;

(defun not (x)
  (cond (x #f)
        (#t #t)))

;;

(defun append (x y)
  (cond ((null x) y)
        (#t (cons (car x)
                  (append (cdr x) y)))))

;;

(defun + (x y)
  (cond ((eq y 0) x)
        (#t (+ (inc x) (dec y)))))

;;

(defun - (x y)
  (cond ((eq y 0) x)
        (#t (- (dec x) (dec y)))))

;;

(defun * (x y)
  (cond ((eq y 0) 0)
        ((eq x 0) 0)
        (#t ((label iter (lambda (a b)
                           (cond ((eq b 1) a)
                                 (#t (iter (+ a x) (dec b))))))
             x y))))

;;

(defun < (x y)
  (cond ((eq x y) #f)
        ((eq x 0) #t)
        ((eq y 0) #f)
        (#t (< (dec x) (dec y)))))

;;

(defun > (x y)
  (not (or (< x y) (eq x y))))
